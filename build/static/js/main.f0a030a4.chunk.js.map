{"version":3,"sources":["components/MyMessage.js","components/MessageForm.js","components/TheirMessage.js","components/ChatFeed.js","components/LoginForm.js","App.js","index.js"],"names":["MyMessage","message","time","attachments","length","src","file","alt","className","style","float","fontSize","marginRight","moment","created","calendar","format","color","backgroundColor","text","display","marginTop","MessageForm","props","useState","value","setValue","dis","setDis","chatID","creds","handleSubmit","chats","userName","event","preventDefault","trim","sendMessage","handleUpload","files","target","onSubmit","placeholder","onChange","isTyping","console","log","htmlFor","PictureOutlined","type","multiple","id","bind","onClick","SmileFilled","SendOutlined","onSelect","e","emoji","native","width","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginLeft","ChatFeed","useEffect","scrollToBottom","animateScroll","containerId","activeChat","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","height","borderRadius","localStorage","removeItem","window","location","reload","admin","keys","Object","key","lastMessageKey","renderMessages","LoginForm","setUserName","password","setPassword","error","setError","a","authObject","axios","get","headers","setItem","MessageOutlined","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0a030a4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nconst MyMessage = ({ message }) => {\r\n\r\n    let time = false;\r\n    if (message.attachments && message.attachments.length > 0) {\r\n        return (\r\n            <>\r\n                <img\r\n                    src={message.attachments[0].file}\r\n                    alt=\"message-attachment\"\r\n                    className=\"message-image\"\r\n                    style={{ float: 'right' }}\r\n                />\r\n                <span style={{ fontSize: \"10px\", float: 'right', marginRight: '10px' }}>{\r\n                    time ?\r\n                        (\r\n                            moment(message.created).calendar()\r\n                        ) : (\r\n                            moment(message.created).format('MMMM Do YYYY, h:mm a')\r\n                        )\r\n\r\n                }\r\n                </span>\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (moment(message.created).format('MMMM DO YYYY') === moment().format('MMMM DO YYYY'))\r\n        time = true;\r\n    else\r\n        time = false;\r\n    return (\r\n        <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50' }}>\r\n            <span style={{ fontSize: \"18px\" }}> {message.text} </span>\r\n            <span style={{ fontSize: \"10px\", display: 'block', marginTop: '2px' }}>{\r\n                time ?\r\n                    (\r\n                        moment(message.created).calendar()\r\n                    ) : (\r\n                        moment(message.created).format('MMMM Do YYYY, h:mm a')\r\n                    )\r\n\r\n            }\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyMessage;","import { useEffect, useState } from 'react';\r\nimport { SendOutlined, PictureOutlined, PictureFilled, SmileFilled } from '@ant-design/icons';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\nimport 'emoji-mart/css/emoji-mart.css'\r\nimport { Picker } from 'emoji-mart'\r\n\r\nconst MessageForm = (props) => {\r\n\r\n    const [value, setValue] = useState([]);\r\n    const [dis, setDis] = useState(false);\r\n    const { chatID, creds, chats, userName } = props;\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n\r\n        isTyping(props, chatID);\r\n        console.log(value);\r\n\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n\r\n        if (text.length > 0) {\r\n            sendMessage(creds, chatID, { text });\r\n\r\n        }\r\n\r\n        setValue('');\r\n        setDis(false);\r\n    };\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatID, { files: event.target.files, text: '' });\r\n    };\r\n\r\n    const addEmoji = (e) => {\r\n        let emoji = e.native;\r\n        setValue(emoji);\r\n    };\r\n    const em = () => {\r\n        if (dis === false)\r\n            setDis(true);\r\n        else\r\n            setDis(false);\r\n\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <form className=\"message-form\" onSubmit={handleSubmit}>\r\n                <input\r\n                    className=\"message-input\"\r\n                    placeholder=\"Send a message...\"\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    onSubmit={handleSubmit}\r\n                />\r\n                <label htmlFor=\"upload-button\">\r\n                    <span className=\"image-button\">\r\n                        <PictureOutlined className=\"picture-icon\" />\r\n                    </span>\r\n                </label>\r\n                <input\r\n                    type=\"file\"\r\n                    multiple={false}\r\n                    id=\"upload-button\"\r\n                    style={{ display: 'none' }}\r\n                    onChange={handleUpload.bind(this)}\r\n                />\r\n\r\n                <label htmlFor=\"emoji-button\" onClick={em}>\r\n                    <span className=\"image-button\">\r\n                        <SmileFilled className=\"picture-icon\" />\r\n                    </span>\r\n                </label>\r\n                <input\r\n                    type=\"text\"\r\n                    multiple={false}\r\n                    id=\"emoji-button\"\r\n                    style={{ display: 'none' }}\r\n                    value={value}\r\n                    onChange={handleUpload.bind(this)}\r\n                />\r\n\r\n                <button type=\"submit\" className=\"send-button\">\r\n                    <SendOutlined className=\"send-icon\" />\r\n                </button>\r\n            </form>\r\n            <span style={{ display: dis ? 'block' : 'none' }} id=\"message\">\r\n                <Picker onSelect={addEmoji} style={{ width: '100%' }} />\r\n            </span>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MessageForm;","import React from 'react'\r\nimport moment from 'moment';\r\n\r\nconst TheirMessage = ({ lastMessage, message }) => {\r\n    let time = false;\r\n    if (moment(message.created).format('MMMM DO YYYY') === moment().format('MMMM DO YYYY'))\r\n        time = true;\r\n    else\r\n        time = false;\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n    return (\r\n        <div className=\"message-row\">\r\n            {\r\n                isFirstMessageByUser && (\r\n                    <div\r\n                        className=\"message-avatar\"\r\n                        style={{ backgroundImage: message.sender && `url(${message?.sender?.avatar})` }}\r\n                    />\r\n                )}\r\n\r\n            { message.attachments && message.attachments.length > 0\r\n                ? (\r\n                    <>\r\n                        <img\r\n                            src={message.attachments[0].file}\r\n                            alt=\"message-attachement\"\r\n                            className=\"message-image\"\r\n                            style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\r\n                        />\r\n                        <span style={{ fontSize: \"10px\", display: \"block\" }}>{\r\n                            time ?\r\n                                (\r\n                                    moment(message.created).calendar()\r\n                                ) : (\r\n                                    moment(message.created).format('MMMM Do YYYY, h:mm a')\r\n                                )\r\n\r\n                        }\r\n                        </span>\r\n                    </>\r\n                ) : (\r\n                    <div className=\"message\" style={{ float: 'left', marginLeft: isFirstMessageByUser ? '4px' : '48px', backgroundColor: '#CABCDC' }}>\r\n                        <span style={{ fontSize: \"18px\" }}> {message.text} </span>\r\n                        <span style={{ fontSize: \"10px\", display: 'block', marginTop: '8px' }}>{\r\n                            time ?\r\n                                (\r\n                                    moment(message.created).calendar()\r\n                                ) : (\r\n                                    moment(message.created).format('MMMM Do YYYY, h:mm a')\r\n                                )\r\n\r\n                        }\r\n                        </span>\r\n                    </div>\r\n                )\r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TheirMessage\r\n","import React, { useEffect, useState } from 'react'\r\nimport MyMessage from './MyMessage';\r\nimport MessageForm from './MessageForm';\r\nimport TheirMessage from './TheirMessage';\r\nimport './chatfeed.css'\r\nimport { animateScroll } from \"react-scroll\";\r\n\r\nconst ChatFeed = (props) => {\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n\r\n    })\r\n    const scrollToBottom = () => {\r\n        animateScroll.scrollToBottom({\r\n            containerId: \"message\"\r\n        });\r\n    }\r\n    console.log(props);\r\n    const { chats, activeChat, userName, messages } = props;\r\n    const chat = chats && chats[activeChat];\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => {\r\n        return chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div\r\n                key={`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{\r\n                    float: isMyMessage ? 'right' : 'left',\r\n                    backgroundImage: `url(${person?.person?.avatar})`\r\n                }}\r\n            />\r\n        ))\r\n    }\r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages)\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return (\r\n                <div key={`msg_${index}`} style={{ width: '100%' }}>\r\n                    <div className=\"message-block\">\r\n                        {\r\n                            isMyMessage\r\n                                ? <MyMessage message={message} />\r\n                                : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />\r\n\r\n                        }\r\n                    </div>\r\n                    <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\r\n                        {renderReadReceipts(message, isMyMessage)}\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    if (!chat) return 'Loading...';\r\n\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">\r\n                    {\r\n                        chat?.title\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"logo\">\r\n                    <span style={{ fontSize: '10px', marginLeft: '10px' }}>\r\n                        {\r\n                            chats[activeChat].people.map((e) => {\r\n                                if (e.person.username === userName)\r\n                                    return <img src={e.person.avatar} style={{ height: '50px', width: '50px', borderRadius: '50%', float: 'right' }} />\r\n                            })\r\n                        }\r\n                    </span>\r\n                    <button onClick={\r\n                        () => {\r\n                            localStorage.removeItem('username')\r\n                            localStorage.removeItem('password')\r\n                            window.location.reload();\r\n                        }\r\n                    } className=\"btn_logout\">\r\n                        Logout\r\n                    </button>\r\n                </div>\r\n                <div className=\"chat-subtitle\">\r\n                    {\r\n                        `Users in the room: \r\n                         ${chat?.people.map((person) =>\r\n                            ` ${person.person.username === chats[activeChat].admin.username ?\r\n                                `${person.person.username} (Admin)`\r\n                                :\r\n                                `${person.person.username}`} `)}`\r\n                    }\r\n                </div>\r\n            </div>\r\n            {renderMessages()}\r\n            <div style={{ height: '100px' }} />\r\n            <div className=\"message-form-container\" id=\"message\">\r\n                <MessageForm {...props} chatID={activeChat} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatFeed\r\n","import React, { useState } from 'react'\r\nimport axios from 'axios';\r\nimport { MessageOutlined } from '@ant-design/icons';\r\n\r\nconst projectID = '9fdbbf6c-d615-4a3c-a1cd-e28627cefc77';\r\nconst LoginForm = () => {\r\n    const [userName, setUserName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const authObject = { 'Project-ID': projectID, 'User-Name': userName, 'User-Secret': password };\r\n\r\n        try {\r\n            await axios.get('https://api.chatengine.io/chats', { headers: authObject });\r\n\r\n            localStorage.setItem('username', userName);\r\n            localStorage.setItem('password', password);\r\n\r\n            window.location.reload();\r\n            setError('');\r\n        } catch (err) {\r\n            setError('Oops, incorrect credentials.');\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className=\"title\">React Chat App</h1>\r\n                <MessageOutlined style={{ fontSize: \"50px\", color: \"white\" }} />\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" value={userName} onChange={(e) => setUserName(e.target.value)} className=\"input\" placeholder=\"Username\" required className=\"input\" />\r\n                    <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required className=\"input\" />\r\n                    <div align=\"center\">\r\n                        <button type=\"submit\" className=\"button\" className=\"input1\">\r\n                            Login\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n                <h1 className=\"error\">{error}</h1>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default LoginForm\r\n","import { ChatEngine } from 'react-chat-engine';\r\nimport ChatFeed from './components/ChatFeed.js';\r\nimport './App.css';\r\nimport LoginForm from './components/LoginForm.js';\r\nconst App = () => {\r\n    if (!localStorage.getItem('username')) return <LoginForm />\r\n    return (\r\n        <ChatEngine\r\n            height=\"100vh\"\r\n            projectID=\"9fdbbf6c-d615-4a3c-a1cd-e28627cefc77\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\r\n        />\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport App from './App';\r\n\r\nReactDom.render(<App />, document.getElementById('root'));"],"sourceRoot":""}